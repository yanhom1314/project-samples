简介
用于构建和管理任何基于Java的工程应用软件，使构建过程更容易，提供统一构建系统，提供高质量的项目信息，提供开发的最佳实践指南，能无缝的加入新的特性。

常见任务
创建Maven项目：mvn archetype:create 
编译源代码：mvn compile 
编译测试代码：mvn test-compile 
运行测试：mvn test 
产生站点：mvn site 
打包：mvn package 
本地仓库安装：mvn install 
远程仓库安装：mvn deploy 
清除产生的项目：mvn clean 
生成JAR文件：mvn jar:jar 
生成IDEA工程文件：mvn idea:idea 
生成Eclipse工程文件：mvn eclipse:eclipse 
任务可以顺序执行比如：mvn clean package jar:jar idea:idea

创建项目
mvn archetype:create  -DarchetypeArtifactId=$AA -DarchetypeGroupId=$AG -DarchetypeVersion=$AV  \
	-DremoteRepositories=$R  -DgroupId=$G -Dversion=$V -DartifactId=$A 

$*为参数内容，其中$R应该使用速度快的仓库中心，一般为自搭建的私服。

使用archetypeArtifactId有很多的Plugin选择：
org.apache.maven.archetypes：
	maven-archetype-archetype　 
	maven-archetype-j2ee-simple　 
	maven-archetype-mojo 
	maven-archetype-portlet 
	maven-archetype-profiles 
	maven-archetype-quickstart 
	maven-archetype-simple 
	maven-archetype-site 
	maven-archetype-site-simple 
	maven-archetype-webapp 

Appfuse插件
org.appfuse.archetypes：
	appfuse-basic-spring
	appfuse-basic-jsf
	appfuse-basic-struts2
	appfuse-basic-tapestory
	appfuse-moudlar-spring
	appfuse-modular-jsf
	appfuse-modular-struts2
	appfuse-modular-tapestory

Maven有许多优秀的Plugin提供使用，在http://maven.apache.org/plugins/，可以参考。

创建多模块项目
首先创建Java Application(my-app)和Web Application(my-webapp)，
在两个工程的上一层目录增加pom.xml，目录结构:
    +- pom.xml
    +- my-app
    | +- pom.xml
    +- my-webapp
    | +- pom.xml 
　　b.pom.xml

  pom.xml
  [...]
  <packaging>pom</packaging>
  [...]  

  <modules>
    <module>my-app</module><!-- Java Application -->
    <module>my-webapp</module><!-- Web Application-->
  </modules>

  [...]
 
  my-webapp/pom.xml
  [...]  
  <packaging>war</packaging>
  [...]
  <!-- 指定父模块 -->
  <parent>
    <groupId>cn.neto.lyf</groupId>
    <artifactId>app</artifactId>
    <version>1.0</version>
  </parent>
  [...]  
 
  my-app/pom.xml
  [...]
  <packaging>jar</packaging>
  [...]
  <!-- 指定父模块-->
  <parent>
    <groupId>cn.neto.lyf</groupId>
    <artifactId>app</artifactId>
    <version>1.0</version>
  </parent>
  [...]
  <!-- 自己单独依赖的库 -->
  <dependencies>
    [...]
  </dependencies>
  [...]  
如果直接在Parent Project的POM文件中使用denpendencies，则所有Child Project自动继承定义依赖。
如果使用dependencyManagment管理Parent Project依赖。
在Parent的POM文件中定义：
<dependencyManagement>
  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactid>junit</artifactId>
      <version>4.8.2</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>log4j</groupId>
      <artifactid>log4j</artifactId>
      <version>1.2.16</version>
    </dependency>
  </dependencies>
</dependencyManagement>
则在Child Project的POM文件中就不是直接继承，必须定义使用，但是不必在定义版本。
<dependency>
    <groupId>junit</groupId>
    <artifactid>junit</artifactId>
</dependency>
<dependency>
    <groupId>log4j</groupId>
    <artifactid>log4j</artifactId>
</dependency>

也可以使用单独的POM文件用IMPORT SCOPE来管理过多的依赖，在Parent Project的POM文件中只定义关键和通用的依赖。
如先定义个POM.XML：
<project>
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.demo</groupId>
  <artifactId>dep-in</artifactId>
  <packaging>pom</packaging>
  <version>1.0</version>
  <dependencyManagement>
    <dependencies>
        <dependency>
          <groupId>junit</groupId>
          <artifactid>junit</artifactId>
          <version>4.8.2</version>
          <scope>test</scope>
        </dependency>
        <dependency>
          <groupId>log4j</groupId>
          <artifactid>log4j</artifactId>
          <version>1.2.16</version>
        </dependency>
    </dependencies>
  </dependencyManagement>
</project>
在需要的POM文件中使用：
<dependencyManagement>
    <dependencies>
        <dependency>
          <groupId>com.demo</groupId>
          <artifactid>dep-in</artifactId>
          <version>1.0</version>
          <type>pom</type>
          <scope>import</scope>
        </dependency>
    </dependencies>
</dependencyManagement>
....
<dependencies>
...
	<dependency>
    	<groupId>junit</groupId>
	    <artifactid>junit</artifactId>
	</dependency>
	<dependency>
    	<groupId>log4j</groupId>
	    <artifactid>log4j</artifactId>
	</dependency>
...
<dependencies>



编译和国际化插件
使用maven-compiler-plugin、native2ascii-maven-plugin。
[...]
<build>
        <plugins>
            <plugin>
               <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>1.5</source>
                    <target>1.5</target>
                    <encoding>UTF-8</encoding>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>native2ascii-maven-plugin</artifactId>
                <configuration>
		     <dest>target/classes</dest> 
		     <src>src/main/resources</src>
                </configuration>
                <executions>
                    <execution>
                        <goals><goal>native2ascii</goal></goals>
                        <configuration> 
			    <encoding>UTF8</encoding>
                            <includes>*.properties</includes>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
</build>
[...]
 
Maven私服搭建

使用archiva搭建私服
1.定义Repositories，配置本地仓库和远程仓库
2.定义Proxy Connectors，配置连接远程仓库的规则
定义了以上两点，当本地仓库没有jar包时，会自动去远程仓库下载。



Maven Plugin开发
mvn archetype:create -DgroupId=sample.plugin -DartifactId=maven-hello-plugin -DarchetypeGroupId=org.apache.maven.archetypes -DarchetypeArtifactId=maven-archetype-mojo


Appfuse
http://www.appfuse.org/display/APF/AppFuse+QuickStart

Spring MVC 

mvn archetype:create -DarchetypeGroupId=org.appfuse.archetypes -DarchetypeArtifactId=appfuse-basic-spring -DremoteRepositories=http://static.appfuse.org/releases -DarchetypeVersion=2.0.2 -DgroupId=com.mycompany.app -DartifactId=myproject

Archetype使用
项目骨架的建立和使用
mvn archetype:generate [-DarchetypeCatalog=local] or [-DremoeRepositories=$R]
generate目标代替create目录生成项目文件。
mvn archetype:create-from-project 从当前文件结构创建一个项目骨架
mvn install 安装在本地
mvn archetype:generate -DarchetypeCatalog=local 本地仓库项目建立
META-INF/maven/archetype-meta.xml
<requiredProperties>
	<requiredProperties>
    <requiredProperty key="spring.version">
      <defaultValue>2.5.5</defaultValue>
    </requiredProperty>
  </requiredProperties>
</requiredProperties>
fileSet节点中的filtered属性为是否过滤，是否替换属性




