Grails

创建
grails create-app [projectName]
grails create-domain-class [domainClassName]
grails create-controller [controllerName]

验证
包含在在domainClass的static constraints = {} 中，在闭包中定义属性的次序与验证约束。
class Race{
	String name
	String city
	Date startDate
	Integer maxRunner=10000
	static constraints = {
		name()
		startDate()
		maxRunner()
		city()
	}
	/*按照约束中定义的次序在视图中展示*/
}
可以定义验证的规则，支持的验证属性可以查阅文档。常用的blank/nullable/min/max/minSize/maxSize/size/matches/inList/url/email等。

...
	static def ownerValidator={ it -> return (it>=new Date())}
	static constraints = {
		name(blank:false,minSize:6,maxSize=15)
		startDate(validator:ownerValidator)//缺省i18中定义Error Code为[ClassName].[propertyName].validator.error，本例中为race.startDate.validator.error
		maxRunner(min:0,max=1000)
		city(inList:['A','B'])
	}
...
关系
hasMany    一对多(1:M)
hasOne     一对一(1:1)
belongsTo  属于

数据库
在conf/DataSource.groovy文件中可以修改数据库的配置。比如使用JNDI
dataSource {	
	pooled = true
}
environments {
	development {
        dataSource {
            dbCreate = "create-drop"
            driverClassName = "org.hsqldb.jdbcDriver"
            url = "jdbc:hsqldb:mem:testDb"
            username = "sa"
            password = ""
        }
    }
	...
	production {
        dataSource {
            dbCreate = "update"
            jndiName = "jdbc/devdb"  /*当然定以在这里可以*/
        }
    }
	
}
如果要使用grails run-app测试，需要在src/Config.groovy中配置属性。
grails.naming.entries = [
        "jdbc/devdb": [
        type: "javax.sql.DataSource",
        auth: "Container",
        description: "FDQ data source",
        driverClassName: "org.postgresql.Driver",
        url: "jdbc:postgresql://localhost:5432/xinfeng",
        username: "postgres",
        password: "xinfeng",
        maxActive: "30",
        maxIdle: "5",
        maxWait: "10000"
    ]
]
如果要使用grails prod war打包后部署到相应的Application Server中，需要根据Server的要求配置JNDI资源。
可以在启动脚本grails-app\conf\BootStrap.groovy中添加测试数据
...
def init = { servletContext ->
	def jane = new Runner(firstName: 'Hello', lastName: 'World', email: 'yafengli@sina.com', dateOfBirth:new Date(), zipCode: '20000001')
    jane.save()
    if(jane.hasErrors()){
        println jane.errors
    }
}
def destroy = {}
...
控制器
在grails-app\conf\UrlMappings.groovy脚本中，定义的缺省规则为"/$controller/$action?/$id?"，例如：/user/show/2是UserController中的show方法，传递参数为id=2。
Grails中的变量生命周期：
request/flash/session/application，其中flash为单词定向后仍存在。其他三种跟Java Web中定义的生命周期相同。
存取值
例：def sid=request.id //request.id='save'
GSP
局部模板
GSP文件名前加下划线(_)即可，比如文件/layouts/_header.gsp内容：
<div id="header">
	<p style="color:red;font: bold 2em '黑体'">头文件内容</p>
</div>
可以在main.gsp文件中使用<g:render/>标签显示局部模板：
<body>
	...
	<g:render template="/layouts/header"/>
	<g:layoutBody/>
</body>

