name: fclabels
version: 2.0.2.3
id: fclabels-2.0.2.3-5b9a0753a5d01d13e67230c2d0027c81
key: fclab_5JuYl5UHAG1IVexeybwVOI
license: BSD3
maintainer: Sebastiaan Visser <code@fvisser.nl>
homepage: https://github.com/sebastiaanvisser/fclabels
synopsis: First class accessor labels implemented as lenses.
description:
    This package provides first class labels that can act as
    bidirectional record fields. The labels can be derived
    automatically using Template Haskell which means you don't have
    to write any boilerplate yourself. The labels are implemented as
    /lenses/ and are fully composable. Lenses can be used to /get/,
    /set/ and /modify/ parts of a data type in a consistent way.
    .
    See "Data.Label" for an introductory explanation or see the
    introductory blog post at
    <http://fvisser.nl/post/2013/okt/1/fclabels-2.0.html>
    .
    * /Total and partial lenses/
    .
    Internally lenses do not used Haskell functions directly, but
    are implemented as categories. Categories allow the lenses to be
    run in custom computational contexts. This approach allows us to
    make partial lenses that point to fields of multi-constructor
    datatypes in an elegant way.
    .
    See "Data.Label.Partial" for the use of partial labels.
    .
    * /Monomorphic and polymorphic lenses/
    .
    We have both polymorphic and monomorphic lenses. Polymorphic
    lenses allow updates that change the type. The types of
    polymorphic lenses are slightly more verbose than their
    monomorphic counterparts, but their usage is similar. Because
    monomorphic lenses are built by restricting the types of
    polymorphic lenses they are essentially the same and can be
    freely composed with eachother.
    .
    See "Data.Label.Mono" and "Data.Label.Poly" for the difference
    between polymorphic and monomorphic lenses.
    .
    * /Using fclabels/
    .
    To simplify working with labels we supply both a set of labels
    for Haskell's base types, like lists, tuples, Maybe and Either,
    and we supply a set of combinators for working with labels for
    values in the Reader and State monad.
    .
    See "Data.Label.Base" and "Data.Label.Monadic" for more
    information.
    .
    * /Changelog from 2.0.2.1 to 2.0.2.2/
    .
    >   - Restored support for GHC 7.4.
category: Data, Lenses
author: Sebastiaan Visser, Erik Hesselink, Chris Eidhof, Sjoerd Visscher
        with lots of help and feedback from others.
exposed: True
exposed-modules:
    Data.Label Data.Label.Base Data.Label.Derive Data.Label.Failing
    Data.Label.Monadic Data.Label.Mono Data.Label.Partial
    Data.Label.Point Data.Label.Poly Data.Label.Total
trusted: False
import-dirs: E:\Github\project-samples\haskell\hs-demo\.cabal-sandbox\x86_64-windows-ghc-7.10.2\fclabels-2.0.2.3-5JuYl5UHAG1IVexeybwVOI
library-dirs: E:\Github\project-samples\haskell\hs-demo\.cabal-sandbox\x86_64-windows-ghc-7.10.2\fclabels-2.0.2.3-5JuYl5UHAG1IVexeybwVOI
data-dir: E:\Github\project-samples\haskell\hs-demo\.cabal-sandbox\x86_64-windows-ghc-7.10.2\fclabels-2.0.2.3
hs-libraries: HSfclabels-2.0.2.3-5JuYl5UHAG1IVexeybwVOI
depends:
    base-4.8.1.0-5e8cb96faebe2db97f24c6e11c6070d6
    mtl-2.2.1-e69cb1de5ad1fa6f3cee1a8785c72610
    template-haskell-2.10.0.0-db6e384d4d6c9b3c27c850a63662b19b
    transformers-0.4.2.0-fc94a62cdea8dc4fe08f06144db05b66
haddock-interfaces: E:\Github\project-samples\haskell\hs-demo\.cabal-sandbox\doc\x86_64-windows-ghc-7.10.2\fclabels-2.0.2.3\html\fclabels.haddock
haddock-html: E:\Github\project-samples\haskell\hs-demo\.cabal-sandbox\doc\x86_64-windows-ghc-7.10.2\fclabels-2.0.2.3\html
