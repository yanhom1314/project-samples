
==================== FINAL INTERFACE ====================
2017-01-10 02:59:59.9279745 UTC

interface main@main:Geometry.Cuboid 7103
  interface hash: 247e8fec75a393f89f5b86c20afafa15
  ABI hash: 88025eae22c6031ea651799950596827
  export-list hash: 3d3a71592106b913dd8689be27a89f34
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: d5583d8f9222577027e54ce7312b112b
  sig of: Nothing
  used TH splices: False
  where
exports:
  Geometry.Cuboid.area
  Geometry.Cuboid.volume
module dependencies:
package dependencies: base-4.8.2.0* ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Monoid
                         base-4.8.2.0:Data.Type.Equality base-4.8.2.0:GHC.Generics
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
19c9f3fe146910db0a2d3c46f11d1281
  area ::
    GHC.Types.Float
    -> GHC.Types.Float -> GHC.Types.Float -> GHC.Types.Float
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U(U)><S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (3, True, False)
                (\ a :: GHC.Types.Float
                   b :: GHC.Types.Float
                   c :: GHC.Types.Float ->
                 case a of wild { GHC.Types.F# x ->
                 case b of wild1 { GHC.Types.F# y ->
                 case c of wild2 { GHC.Types.F# y1 ->
                 GHC.Types.F#
                   (GHC.Prim.plusFloat#
                      (GHC.Prim.plusFloat#
                         (GHC.Prim.plusFloat#
                            (GHC.Prim.timesFloat# x y)
                            (GHC.Prim.timesFloat# x y))
                         (GHC.Prim.plusFloat#
                            (GHC.Prim.timesFloat# x y1)
                            (GHC.Prim.timesFloat# x y1)))
                      (GHC.Prim.plusFloat#
                         (GHC.Prim.timesFloat# y1 y)
                         (GHC.Prim.timesFloat# y1 y))) } } }) -}
394a271459f2632563cc554edbcd6ce3
  volume ::
    GHC.Types.Float
    -> GHC.Types.Float -> GHC.Types.Float -> GHC.Types.Float
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U(U)><S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (3, True, False)
                (\ a :: GHC.Types.Float
                   b :: GHC.Types.Float
                   c :: GHC.Types.Float ->
                 case a of wild { GHC.Types.F# x ->
                 case b of wild1 { GHC.Types.F# y ->
                 case c of wild2 { GHC.Types.F# y1 ->
                 GHC.Types.F#
                   (GHC.Prim.timesFloat# (GHC.Prim.timesFloat# x y) y1) } } }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

