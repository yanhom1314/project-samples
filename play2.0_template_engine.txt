每一个.scala.html文件会被编译为一个Function，例如：index.scala.html会被编译成views.html.index函数

1.模板中的魔法符号@，当使用@(...)，(...)内为单个scala code语句的表达式计算值返回，当使用@{...}时，{...}为scala code多语句，会编译处理并返回值，例如：

Hello @(your.name+her.name)! //your.name+her.name为single-token语句；
Hello @{val allname=your.name+her.name;allname} //这是muti-token语句；

当对取值时，()与{}可以省略，例如：
Hello @(your.name),@{your.name},@your.name!

2.在模板中使用Pattern时,正确的作法是：
@{your.name match {
	case name:String => name
	case _ => ""
}}

在Play 2.0.4文档中的写法报错，可能需要修正；

3.if的使用，if可以简洁的用法，例如：

@if(!your.name.isEmpty) {<h3>@your.name</h3>} else {<h3>Anymouns.</h3>}

当if语句比较复杂时，可以使用@{}多语句定义块，例如：
@{if(!your.name.isEmpty) {"<h3>"+your.name+"</h3>"} else {"<h3>Anymouns.</h3>"}}

两种的区别在于前者为返回就是Html，后者返回的是String。


4.模板中定义block，这个在使用模板时很有用处，例如：

@name = { @your.name }
@name = { @(your.name)}
@name = @{your.name} //使用@{}是=号后的{}可以省略，使用@()不可以省略=号后的{}

@welcome = {<h3>Hello @your.name</h3>}


5.flash的使用
flash仅能在Redirect(...).flashing(..)

def index = Action { impilcit request =>
	Ok(views.html.index())
}

def homt =Action { impilicit request =>
	Redirect(routes.Application.index).flashing(
		"success" -> "This is a SUCCESS MESSAGE!"
	)
}

index.scala.html
@()(implicit flash:Flash)
...
@flash.get("success").getOrElse("Welcome!")


6.Form表单
通过定义val userForm=Form[User](
 mapping(
      "name" -> text.verifying(nonEmpty),
      "address" -> text.verifying("#ERROR MESSAGE#", address => if (address != null && address.length > 6) true else false)
    )((name, address) => User(-1, name, address))((user: User) => Some((user.name, user.address)))
  ))

val anyData=Map("name" -> "test","address" -> "JiangSuNanJing")
val user:User=userForm.bind(anyData).get
接受页面表单传送的数据使用:
val user:User=userForm.bindFromRequest

*小技巧*
填充页面表单正确数据，可以单独写成Tag(或者叫函数~~)
tags/init.scala.html
@(data:Map[String,String])
@data.map { it =>$("input[name=@it._1]").val("@it._2");}


在jquery的function中使用；
<script type="text/javascript">
    $(function () {
    	//根据表单name填写正确值
        @tags.init(myForm.data)
    });
</script>

也可以在template中定义block；
@init = {@myForm.data.map { it =>
$("input[name=@it._1]").val("@it._2");
}}

*小技巧*
在表单数据后显示错误信息；
可以定义tags/errors.scala.html文件；

@(hasErrors:Boolean,value:play.api.libs.json.JsValue)

@if(hasErrors) {
var data = @{Html(value.toString)};
for (var index in data) {
$("input[name=" + index + "]").after("<span style='color: red'>" + data[index] + "</span");
}}
就可以用以下代码调用：

<script type="text/javascript">
    $(function () {
        @tags.errors(myForm.hasErrors, myForm.errorsAsJson)
    });
</script>
当然也可以在本函数内定义使用，不过就不具有通用性了。
@(myForm:Form[A])(implicit flash:Flash)
...
@if(myForm.hasErrors) {
<script type="text/javascript">
    var data = @{Html(myForm.errorsAsJson.toString)};
    for (var index in data) {
        $("input[name=" + index + "]").after("<span style='color: red'>" + data[index] + "</span");
    }
</script>
}
*小技巧*
获取单个属性值显示
@name = {@if(!myForm.value.isEmpty) {@myForm.value.get.name}}

<p>Hello @name!</p>
或者
@if(!user.value.isEmpty){
<h1>@user.value.get.name</h1>
}





