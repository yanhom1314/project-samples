/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(1);
	__webpack_require__(2);
	__webpack_require__(3);

	var VeeValidate = __webpack_require__(4);
	var message = __webpack_require__(5);

	const config = {
	    errorBagName: 'errors', // change if property conflicts.
	    fieldsBagName: 'fields',
	    delay: 0,
	    locale: 'cn',
	    dictionary: {
	        cn: {
	            message
	        }
	    },
	    strict: true
	};
	Vue.use(VeeValidate, config);

	//
	// console.log("$:" + $.ajax() + " " + jQuery.ajax());
	// console.log("u:" + new u({
	//         el: '#app',
	//         data: {
	//             message: 'Hello Vue!'
	//         }
	//     }));
	// console.log("VeeValidate:"+VeeValidate);
	// console.log("f:" + f('/data/hello.json').then(function (response) {
	//         return response.json();
	//     }).then(function (data) {
	//         app6.message = JSON.stringify(data);
	//     }).catch(function (e) {
	//         console.log("Oops, error");
	//     }));

	var app = new Vue({
	    el: '#app',
	    data: {
	        message: 'Hello Vue!'
	    }
	});

	var app1 = new Vue({
	    el: '#app1',
	    data: {
	        message: 'Hello Vue in app-1!'
	    }
	});

	var app2 = new Vue({
	    el: '#app-2',
	    data: {
	        message: 'You loaded this page on ' + new Date()
	    }
	});
	var app3 = new Vue({
	    el: '#app-3',
	    data: {
	        seen: true
	    }
	});
	var app4 = new Vue({
	    el: '#app-4',
	    data: {
	        list: [
	            {text: 'Learn JavaScript'},
	            {text: 'Learn Vue'},
	            {text: 'Build something awesome'}
	        ]
	    }
	});
	var app5 = new Vue({
	    el: '#app-5',
	    data: {
	        message: 'Hello Vue.js!'
	    },
	    methods: {
	        reverseMessage: function () {
	            if (window.confirm("确定执行吗？"))
	                this.message = this.message.split('').reverse().join('');
	        }
	    }
	});

	var app6 = new Vue({
	    el: '#app-6',
	    data: {
	        message: 'Hello Vue!',
	        content: "<h1>Hello</h1>"
	    },
	    methods: {
	        toUpper: function () {
	            if (window.confirm("To upper!"))
	                this.message = this.message.toUpperCase();
	        },
	        toLower: function () {
	            if (window.confirm("To lower!"))
	                this.message = this.message.toLowerCase();
	        },
	        ajax: function () {
	            var msg = this.message;
	            fetch('/data/hello.json').then(function (response) {
	                return response.json();
	            }).then(function (data) {
	                app6.message = JSON.stringify(data);
	            }).catch(function (e) {
	                console.log("Oops, error");
	            });
	        },
	        html: function () {
	            var msg = this.message;
	            fetch('/nothing.html').then(function (response) {
	                return response.text();
	            }).then(function (text) {
	                app6.content = text;
	            }).catch(function (e) {
	                console.log("Oops, error");
	            });
	        }
	    }
	});

	// Define a new component called todo-item
	Vue.component('todo-item', {
	    props: ['todo'],
	    template: '<li>{{ todo.text }}</li>'
	});

	var app7 = new Vue({
	    el: '#app-7',
	    data: {
	        list: [
	            {text: 'Vegetables'},
	            {text: 'Cheese'},
	            {text: 'Whatever else humans are supposed to eat'}
	        ]
	    }
	});

	var app8 = new Vue({
	    el: "#app8"
	});

	//window.onload
	$(function () {
	    $("#_close").click(function () {
	        console.log("_close");
	    });
	    $("#_save").click(function () {
	        console.log("_save");
	    });
	});

/***/ },
/* 1 */
/***/ function(module, exports) {

	module.exports = jQuery;

/***/ },
/* 2 */
/***/ function(module, exports) {

	module.exports = Vue;

/***/ },
/* 3 */
/***/ function(module, exports) {

	module.exports = fetch;

/***/ },
/* 4 */
/***/ function(module, exports) {

	module.exports = VeeValidate;

/***/ },
/* 5 */
/***/ function(module, exports) {

	export default {
	  after: (field, [target]) => ` ${field}必须在${target}之后`,
	  alpha_dash: (field) => ` ${field}能够包含字母数字字符，包括破折号、下划线`,
	  alpha_num: (field) => `${field} 只能包含字母数字字符.`,
	  alpha_spaces: (field) => ` ${field} 只能包含字母字符，包括空格.`,
	  alpha: (field) => ` ${field} 只能包含字母字符.`,
	  before: (field, [target]) => ` ${field} 必须在${target} 之前.`,
	  between: (field, [min, max]) => ` ${field} 必须在${min} ${max}之间.`,
	  confirmed: (field, [confirmedField]) => ` ${field} 不能和${confirmedField}匹配.`,
	  date_between: (field, [min, max]) => ` ${field}必须在${min}和${max}之间.`,
	  date_format: (field, [format]) => ` ${field}必须在在${format}格式中.`,
	  decimal: (field, [decimals] = ['*']) => ` ${field} 必须是数字的而且能够包含${decimals === '*' ? '' : decimals} 小数点.`,
	  digits: (field, [length]) => ` ${field} 必须是数字，且精确到 ${length}数`,
	  dimensions: (field, [width, height]) => ` ${field}必须是 ${width} 像素到 ${height} 像素.`,
	  email: (field) => ` ${field} 必须是有效的邮箱.`,
	  ext: (field) => ` ${field} 必须是有效的文件.`,
	  image: (field) => ` ${field} 必须是图片.`,
	  in: (field) => ` ${field} 必须是一个有效值.`,
	  ip: (field) => ` ${field} 必须是一个有效的地址.`,
	  max: (field, [length]) => ` ${field} 不能大于${length}字符.`,
	  mimes: (field) => ` ${field} 必须是有效的文件类型.`,
	  min: (field, [length]) => ` ${field} 必须至少有 ${length} 字符.`,
	  not_in: (field) => ` ${field}必须是一个有效值.`,
	  numeric: (field) => ` ${field} 只能包含数字字符.`,
	  regex: (field) => ` ${field} 格式无效.`,
	  required: (field) => `${field} 是必须的.`,
	  size: (field, [size]) => ` ${field} 必须小于 ${size} KB.`,
	  url: (field) => ` ${field}不是有效的url.`
	}


/***/ }
/******/ ]);